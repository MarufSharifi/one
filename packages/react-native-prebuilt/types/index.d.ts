import { type BuildOptions } from 'esbuild';
export declare function buildAll(): Promise<void>;
export declare function buildReactJSX(options?: BuildOptions): Promise<import("esbuild").BuildResult<{
    bundle: boolean;
    splitting?: boolean | undefined;
    preserveSymlinks?: boolean | undefined;
    outfile?: string | undefined;
    metafile?: boolean | undefined;
    outdir?: string | undefined;
    outbase?: string | undefined;
    external: string[];
    packages?: "external" | undefined;
    alias?: Record<string, string> | undefined;
    loader?: {
        [ext: string]: import("esbuild").Loader;
    } | undefined;
    resolveExtensions?: string[] | undefined;
    mainFields?: string[] | undefined;
    conditions?: string[] | undefined;
    write?: boolean | undefined;
    allowOverwrite: boolean;
    tsconfig?: string | undefined;
    outExtension?: {
        [ext: string]: string;
    } | undefined;
    publicPath?: string | undefined;
    entryNames?: string | undefined;
    chunkNames?: string | undefined;
    assetNames?: string | undefined;
    inject?: string[] | undefined;
    banner?: {
        [type: string]: string;
    } | undefined;
    footer?: {
        [type: string]: string;
    } | undefined;
    entryPoints: string[] | Record<string, string> | {
        in: string;
        out: string;
    }[];
    stdin?: import("esbuild").StdinOptions | undefined;
    plugins?: import("esbuild").Plugin[] | undefined;
    absWorkingDir?: string | undefined;
    nodePaths?: string[] | undefined;
    sourcemap?: boolean | "external" | "linked" | "inline" | "both" | undefined;
    legalComments?: "external" | "linked" | "inline" | "none" | "eof" | undefined;
    sourceRoot?: string | undefined;
    sourcesContent?: boolean | undefined;
    format: import("esbuild").Format;
    globalName?: string | undefined;
    target: string | string[];
    supported?: Record<string, boolean> | undefined;
    platform: import("esbuild").Platform;
    mangleProps?: RegExp | undefined;
    reserveProps?: RegExp | undefined;
    mangleQuoted?: boolean | undefined;
    mangleCache?: Record<string, string | false> | undefined;
    drop?: import("esbuild").Drop[] | undefined;
    dropLabels?: string[] | undefined;
    minify?: boolean | undefined;
    minifyWhitespace?: boolean | undefined;
    minifyIdentifiers?: boolean | undefined;
    minifySyntax?: boolean | undefined;
    lineLimit?: number | undefined;
    charset?: import("esbuild").Charset | undefined;
    treeShaking?: boolean | undefined;
    ignoreAnnotations?: boolean | undefined;
    jsx: "transform" | "preserve" | "automatic";
    jsxFactory: string;
    jsxFragment?: string | undefined;
    jsxImportSource?: string | undefined;
    jsxDev?: boolean | undefined;
    jsxSideEffects?: boolean | undefined;
    define: {
        [key: string]: string;
    };
    pure?: string[] | undefined;
    keepNames?: boolean | undefined;
    color?: boolean | undefined;
    logLevel: import("esbuild").LogLevel;
    logLimit?: number | undefined;
    logOverride?: Record<string, import("esbuild").LogLevel> | undefined;
    tsconfigRaw?: string | import("esbuild").TsconfigRaw | undefined;
}>>;
export declare function buildReact(options?: BuildOptions): Promise<import("esbuild").BuildResult<{
    bundle: boolean;
    splitting?: boolean | undefined;
    preserveSymlinks?: boolean | undefined;
    outfile?: string | undefined;
    metafile?: boolean | undefined;
    outdir?: string | undefined;
    outbase?: string | undefined;
    external: string[];
    packages?: "external" | undefined;
    alias?: Record<string, string> | undefined;
    loader?: {
        [ext: string]: import("esbuild").Loader;
    } | undefined;
    resolveExtensions?: string[] | undefined;
    mainFields?: string[] | undefined;
    conditions?: string[] | undefined;
    write?: boolean | undefined;
    allowOverwrite: boolean;
    tsconfig?: string | undefined;
    outExtension?: {
        [ext: string]: string;
    } | undefined;
    publicPath?: string | undefined;
    entryNames?: string | undefined;
    chunkNames?: string | undefined;
    assetNames?: string | undefined;
    inject?: string[] | undefined;
    banner?: {
        [type: string]: string;
    } | undefined;
    footer?: {
        [type: string]: string;
    } | undefined;
    entryPoints: string[] | Record<string, string> | {
        in: string;
        out: string;
    }[];
    stdin?: import("esbuild").StdinOptions | undefined;
    plugins?: import("esbuild").Plugin[] | undefined;
    absWorkingDir?: string | undefined;
    nodePaths?: string[] | undefined;
    sourcemap?: boolean | "external" | "linked" | "inline" | "both" | undefined;
    legalComments?: "external" | "linked" | "inline" | "none" | "eof" | undefined;
    sourceRoot?: string | undefined;
    sourcesContent?: boolean | undefined;
    format: import("esbuild").Format;
    globalName?: string | undefined;
    target: string | string[];
    supported?: Record<string, boolean> | undefined;
    platform: import("esbuild").Platform;
    mangleProps?: RegExp | undefined;
    reserveProps?: RegExp | undefined;
    mangleQuoted?: boolean | undefined;
    mangleCache?: Record<string, string | false> | undefined;
    drop?: import("esbuild").Drop[] | undefined;
    dropLabels?: string[] | undefined;
    minify?: boolean | undefined;
    minifyWhitespace?: boolean | undefined;
    minifyIdentifiers?: boolean | undefined;
    minifySyntax?: boolean | undefined;
    lineLimit?: number | undefined;
    charset?: import("esbuild").Charset | undefined;
    treeShaking?: boolean | undefined;
    ignoreAnnotations?: boolean | undefined;
    jsx: "transform" | "preserve" | "automatic";
    jsxFactory: string;
    jsxFragment?: string | undefined;
    jsxImportSource?: string | undefined;
    jsxDev?: boolean | undefined;
    jsxSideEffects?: boolean | undefined;
    define: {
        [key: string]: string;
    };
    pure?: string[] | undefined;
    keepNames?: boolean | undefined;
    color?: boolean | undefined;
    logLevel: import("esbuild").LogLevel;
    logLimit?: number | undefined;
    logOverride?: Record<string, import("esbuild").LogLevel> | undefined;
    tsconfigRaw?: string | import("esbuild").TsconfigRaw | undefined;
}>>;
export declare function buildReactNative(options?: BuildOptions): Promise<void>;
//# sourceMappingURL=index.d.ts.map