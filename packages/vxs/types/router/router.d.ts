import { type NavigationContainerRefWithCurrent } from '@react-navigation/native';
import { type ComponentType } from 'react';
import type { RouteNode } from '../Route';
import type { ResultState } from '../fork/getStateFromPath';
import { type ExpoLinkingOptions } from '../getLinkingConfig';
import type { VXSRouter } from '../interfaces/router';
import type { RequireContext } from '../types';
import { type UrlObject } from './getNormalizedStatePath';
export declare let routeNode: RouteNode | null;
export declare let rootComponent: ComponentType;
export declare let linking: ExpoLinkingOptions | undefined;
export declare let hasAttemptedToHideSplash: boolean;
export declare let initialState: ResultState | undefined;
export declare let rootState: ResultState | undefined;
export declare let routeInfo: UrlObject | undefined;
export declare let navigationRef: VXSRouter.NavigationRef;
type RootStateListener = (state: ResultState) => void;
export declare function initialize(context: RequireContext, ref: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>, initialLocation?: URL): void;
export declare function navigate(url: VXSRouter.Href, options?: VXSRouter.LinkToOptions): void;
export declare function push(url: VXSRouter.Href, options?: VXSRouter.LinkToOptions): void;
export declare function dismiss(count?: number): void;
export declare function replace(url: VXSRouter.Href, options?: VXSRouter.LinkToOptions): void;
export declare function setParams(params?: Record<string, string | number>): void | undefined;
export declare function dismissAll(): void;
export declare function goBack(): void;
export declare function canGoBack(): boolean;
export declare function canDismiss(): boolean;
export declare function getSortedRoutes(): RouteNode[];
export declare function updateState(state: ResultState, nextStateParam?: ResultState): void;
export declare function getRouteInfo(state: ResultState): UrlObject;
export declare function subscribeToRootState(subscriber: RootStateListener): () => void;
export declare function subscribeToStore(subscriber: () => void): () => void;
export declare function snapshot(): {
    linkTo: typeof linkTo;
    routeNode: RouteNode | null;
    rootComponent: ComponentType;
    linking: ExpoLinkingOptions | undefined;
    hasAttemptedToHideSplash: boolean;
    initialState: ResultState | undefined;
    rootState: ResultState | undefined;
    nextState: ResultState | undefined;
    routeInfo: UrlObject | undefined;
    splashScreenAnimationFrame: number | undefined;
    navigationRef: VXSRouter.NavigationRef;
    navigationRefSubscription: () => void;
    rootStateSubscribers: Set<RootStateListener>;
    storeSubscribers: Set<() => void>;
};
export declare function rootStateSnapshot(): ResultState;
export declare function routeInfoSnapshot(): UrlObject;
export declare function useVXSRouter(): {
    linkTo: typeof linkTo;
    routeNode: RouteNode | null;
    rootComponent: ComponentType;
    linking: ExpoLinkingOptions | undefined;
    hasAttemptedToHideSplash: boolean;
    initialState: ResultState | undefined;
    rootState: ResultState | undefined;
    nextState: ResultState | undefined;
    routeInfo: UrlObject | undefined;
    splashScreenAnimationFrame: number | undefined;
    navigationRef: VXSRouter.NavigationRef;
    navigationRefSubscription: () => void;
    rootStateSubscribers: Set<RootStateListener>;
    storeSubscribers: Set<() => void>;
};
export declare function useStoreRootState(): ResultState;
export declare function useStoreRouteInfo(): UrlObject;
export declare function cleanup(): void;
export declare const preloadingLoader: {};
export declare function preloadRoute(href: string): void;
export declare function linkTo(href: string, event?: string, options?: VXSRouter.LinkToOptions): void;
type LoadState = 'start' | 'finish';
type LoadStateListener = (type: LoadState) => void;
export declare function onLoadingState(l: LoadStateListener): () => void;
export {};
//# sourceMappingURL=router.d.ts.map