import { jsx as _jsx } from "react/jsx-runtime";
import * as React from 'react';
import { View, StyleSheet } from 'react-native';
import { useSafeAreaInsets } from './SafeAreaContext';
// prettier-ignore
const TOP = 0b1000;
const RIGHT = 0b0100;
const BOTTOM = 0b0010;
const LEFT = 0b0001;
const ALL = 0b1111;
/* eslint-disable no-bitwise */
const edgeBitmaskMap = {
    top: TOP,
    right: RIGHT,
    bottom: BOTTOM,
    left: LEFT,
};
export const SafeAreaView = React.forwardRef(({ style = {}, mode, edges, ...rest }, ref) => {
    const insets = useSafeAreaInsets();
    const edgeBitmask = edges != null
        ? Array.isArray(edges)
            ? edges.reduce((acc, edge) => acc | edgeBitmaskMap[edge], 0)
            : Object.keys(edges).reduce((acc, edge) => acc | edgeBitmaskMap[edge], 0)
        : ALL;
    const appliedStyle = React.useMemo(() => {
        const insetTop = edgeBitmask & TOP ? insets.top : 0;
        const insetRight = edgeBitmask & RIGHT ? insets.right : 0;
        const insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;
        const insetLeft = edgeBitmask & LEFT ? insets.left : 0;
        const flatStyle = StyleSheet.flatten(style);
        if (mode === 'margin') {
            const { margin = 0, marginVertical = margin, marginHorizontal = margin, marginTop = marginVertical, marginRight = marginHorizontal, marginBottom = marginVertical, marginLeft = marginHorizontal, } = flatStyle;
            const marginStyle = {
                marginTop: marginTop + insetTop,
                marginRight: marginRight + insetRight,
                marginBottom: marginBottom + insetBottom,
                marginLeft: marginLeft + insetLeft,
            };
            return [style, marginStyle];
        }
        const { padding = 0, paddingVertical = padding, paddingHorizontal = padding, paddingTop = paddingVertical, paddingRight = paddingHorizontal, paddingBottom = paddingVertical, paddingLeft = paddingHorizontal, } = flatStyle;
        const paddingStyle = {
            paddingTop: paddingTop + insetTop,
            paddingRight: paddingRight + insetRight,
            paddingBottom: paddingBottom + insetBottom,
            paddingLeft: paddingLeft + insetLeft,
        };
        return [style, paddingStyle];
    }, [style, insets, mode, edgeBitmask]);
    return _jsx(View, { style: appliedStyle, ...rest, ref: ref });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2FmZUFyZWFWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2FmZUFyZWFWaWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDL0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFHckQsa0JBQWtCO0FBQ2xCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQTtBQUNsQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUE7QUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFBO0FBQ3JCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQTtBQUNuQixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUE7QUFFbEIsK0JBQStCO0FBRS9CLE1BQU0sY0FBYyxHQUF5QjtJQUMzQyxHQUFHLEVBQUUsR0FBRztJQUNSLEtBQUssRUFBRSxLQUFLO0lBQ1osTUFBTSxFQUFFLE1BQU07SUFDZCxJQUFJLEVBQUUsSUFBSTtDQUNYLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FDMUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQzVDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixFQUFFLENBQUE7SUFFbEMsTUFBTSxXQUFXLEdBQ2YsS0FBSyxJQUFJLElBQUk7UUFDWCxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFXLEVBQUUsSUFBVSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMs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